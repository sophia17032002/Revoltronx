{"ast":null,"code":"// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import SearchBar from \"./components/SearchBar\";\n// import SearchResults from \"./components/SearchResults\";\n// import \"./App.css\";\n\n// const App = () => {\n//   const [query, setQuery] = useState(\"\");\n//   const [results, setResults] = useState([]);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [filter, setFilter] = useState(\"all\"); // State for filter\n\n//   const handleSearch = async () => {\n//     if (!query) return; // Prevent empty searches\n//     setIsLoading(true); // Start loading\n//     try {\n//       const response = await axios.get(\n//         `http://localhost:5000/search?query=${query}`\n//       );\n//       setResults(response.data);\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//     } finally {\n//       setIsLoading(false); // Stop loading\n//     }\n//   };\n\n//   // Filter results based on the selected filter type\n//   const filteredResults = results.filter((result) => {\n//     if (filter === \"all\") return true;\n//     switch (filter) {\n//       case \"youtube\":\n//         return result.type === \"video\"; // Match type for YouTube\n//       case \"book\":\n//         return result.type === \"book\"; // Match type for articles\n//       case \"academic\":\n//         return result.type === \"academic\"; // Match type for academic papers\n//       case \"blog\":\n//         return result.type === \"post\"; // Match type for blog posts\n//       default:\n//         return true;\n//     }\n//   });\n\n//   return (\n//     <div className=\"app\">\n//       <h1>Search App</h1>\n//       <SearchBar\n//         query={query}\n//         setQuery={setQuery}\n//         handleSearch={handleSearch}\n//       />\n\n//       {/* Filter Options */}\n//       <div className=\"filter-container\">\n//         <label>Filter by:</label>\n//         <select value={filter} onChange={(e) => setFilter(e.target.value)}>\n//           <option value=\"all\">All</option>\n//           <option value=\"youtube\">YouTube</option>\n//           <option value=\"book\">Book</option>\n//           <option value=\"academic\">Academic Papers</option>\n//           <option value=\"blog\">Blogs</option>\n//         </select>\n//       </div>\n\n//       <SearchResults results={filteredResults} isLoading={isLoading} />\n//     </div>\n//   );\n// };\n\n// export default App;","map":{"version":3,"names":[],"sources":["C:/Users/PC/Downloads/Revoltronx/client/src/App.js"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import axios from \"axios\";\r\n// import SearchBar from \"./components/SearchBar\";\r\n// import SearchResults from \"./components/SearchResults\";\r\n// import \"./App.css\";\r\n\r\n// const App = () => {\r\n//   const [query, setQuery] = useState(\"\");\r\n//   const [results, setResults] = useState([]);\r\n//   const [isLoading, setIsLoading] = useState(false);\r\n//   const [filter, setFilter] = useState(\"all\"); // State for filter\r\n\r\n//   const handleSearch = async () => {\r\n//     if (!query) return; // Prevent empty searches\r\n//     setIsLoading(true); // Start loading\r\n//     try {\r\n//       const response = await axios.get(\r\n//         `http://localhost:5000/search?query=${query}`\r\n//       );\r\n//       setResults(response.data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching data:\", error);\r\n//     } finally {\r\n//       setIsLoading(false); // Stop loading\r\n//     }\r\n//   };\r\n\r\n//   // Filter results based on the selected filter type\r\n//   const filteredResults = results.filter((result) => {\r\n//     if (filter === \"all\") return true;\r\n//     switch (filter) {\r\n//       case \"youtube\":\r\n//         return result.type === \"video\"; // Match type for YouTube\r\n//       case \"book\":\r\n//         return result.type === \"book\"; // Match type for articles\r\n//       case \"academic\":\r\n//         return result.type === \"academic\"; // Match type for academic papers\r\n//       case \"blog\":\r\n//         return result.type === \"post\"; // Match type for blog posts\r\n//       default:\r\n//         return true;\r\n//     }\r\n//   });\r\n\r\n//   return (\r\n//     <div className=\"app\">\r\n//       <h1>Search App</h1>\r\n//       <SearchBar\r\n//         query={query}\r\n//         setQuery={setQuery}\r\n//         handleSearch={handleSearch}\r\n//       />\r\n\r\n//       {/* Filter Options */}\r\n//       <div className=\"filter-container\">\r\n//         <label>Filter by:</label>\r\n//         <select value={filter} onChange={(e) => setFilter(e.target.value)}>\r\n//           <option value=\"all\">All</option>\r\n//           <option value=\"youtube\">YouTube</option>\r\n//           <option value=\"book\">Book</option>\r\n//           <option value=\"academic\">Academic Papers</option>\r\n//           <option value=\"blog\">Blogs</option>\r\n//         </select>\r\n//       </div>\r\n\r\n//       <SearchResults results={filteredResults} isLoading={isLoading} />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default App;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}